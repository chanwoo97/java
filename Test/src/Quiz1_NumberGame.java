import java.util.Scanner;
import java.util.Random;

public class Quiz1_NumberGame {
    public void start() {
        Random random = new Random(); // 랜덤 숫자를 만들기 위해 Random 객체 생성
        int target = random.nextInt(100) + 1; // 0~99 사이 난수 생성 후 +1 해서 1~100 사이 숫자 저장
        int attempts = 0; // 시도 횟수를 기록할 변수, 처음엔 0으로 초기화

        System.out.println("=== 숫자맞추기 게임을 시작합니다. ==="); // 게임 시작 안내문 출력
        System.out.println("컴퓨터가 숫자를 생각했습니다."); // 컴퓨터가 숫자를 정했다는 안내문 출력

        String hint = (target % 2 == 0) ? "짝수" : "홀수"; // 숫자가 짝수면 "짝수", 홀수면 "홀수"라는 문자열 저장
        System.out.println("힌트는 " + hint + "입니다."); // 사용자에게 짝수/홀수 힌트 출력

        Scanner scanner = new Scanner(System.in); // 키보드 입력 받기 위한 Scanner 객체 생성

        while (true) { // 무한 반복, 정답을 맞출 때까지 계속 실행
            System.out.print("1~100 사이의 값을 입력 >> "); // 사용자에게 숫자 입력 요청
            if (!scanner.hasNextInt()) { // 입력이 정수인지 아닌지 체크
                System.out.println("숫자를 입력해주세요."); // 정수가 아니면 경고문 출력
                scanner.next(); // 잘못된 입력 버리고 다음 입력 받음
                continue; // 반복문의 처음으로 돌아감 (다시 입력받음)
            }

            int number = scanner.nextInt(); // 입력받은 정수를 number 변수에 저장

            if (number < 1 || number > 100) { // 입력한 숫자가 1~100 범위를 벗어나면
                System.out.println("1~100 사이의 숫자만 입력하세요."); // 경고문 출력
                continue; // 다시 입력받기 위해 반복 처음으로 이동
            }

            attempts++; // 시도 횟수를 1 증가시킴

            if (number < target) { // 입력 숫자가 정답보다 작으면
                System.out.println("더 큰 수입니다."); // 더 큰 수를 입력하라는 힌트 출력
            } else if (number > target) { // 입력 숫자가 정답보다 크면
                System.out.println("더 작은 수입니다."); // 더 작은 수를 입력하라는 힌트 출력
            } else { // 입력 숫자가 정답과 같으면
                System.out.println(attempts + "회 만에 맞췄습니다."); // 몇 번만에 맞췄는지 출력
                System.out.println("=== 게임을 종료합니다. ==="); // 게임 종료 안내문 출력
                break; // 반복문 종료 (게임 끝)
            }
        }
        scanner.close(); // Scanner 객체를 닫아줌 (입력 종료)
    }

    public static void main(String[] args) {
        Quiz1_NumberGame numbergame = new Quiz1_NumberGame(); // Quiz1_NumberGame 클래스 객체 생성
        numbergame.start(); // 게임 시작 메서드 호출 (실제로 게임 실행)
    }
}

/*
쉽게 이해할 수 있게 그림 설명

랜덤 숫자 생성
[랜덤 기계] ---> (1~100 사이 숫자) ---> target 변수에 저장
 
게임 흐름 요약
[사용자 입력] --> [입력 확인] --> [범위 확인] --> [정답 비교] --> [결과 피드백]
↑ ↓
잘못된 입력시 경고 메시지 출력 후 다시 입력받기 <------ 정답 맞추면 종료
  
힌트 주기
target % 2 == 0? -> 짝수
아니면 -> 홀수
힌트는 게임 시작 시 딱 한 번 출력되어 사용자가 숫자를 추측하는 데 도움을 줌 

-------------------------------------------------------------------

🎮 숫자 맞추기 게임 구조도
🧠 전체 흐름 다이어그램
┌───────────────────────────────────────┐
│         main() 메서드 실행            │
└───────────────────────────────────────┘
                  │
                  ▼
┌───────────────────────────────────────┐
│  Quiz1_NumberGame 객체를 생성함       │
│  game.start() 메서드를 호출함         │
└───────────────────────────────────────┘
                  │
                  ▼
┌───────────────────────────────────────┐
│ start() 메서드 시작                   │
│ - 랜덤 숫자(1~100) 생성               │
│ - 힌트(짝수/홀수) 출력                │
│ - 사용자 입력을 기다림               │
└───────────────────────────────────────┘
                  │
                  ▼
     ┌─────────────────────────────┐
     │ 사용자의 입력을 숫자인지?   │◄─────┐
     └─────────────────────────────┘      │
                  │                      아니오
                예 │                       │
                  ▼                       │
     ┌─────────────────────────────┐      │
     │ 입력값이 1~100 범위인지?     │      │
     └─────────────────────────────┘      │
                  │                      아니오
                예 │                       │
                  ▼                       │
     ┌─────────────────────────────┐      │
     │ 시도 횟수 1 증가             │      │
     └─────────────────────────────┘      │
                  │                       │
                  ▼                       │
     ┌─────────────────────────────┐      │
     │ 입력값과 정답 비교          │      │
     └─────────────────────────────┘      │
         │          │             │       │
         ▼          ▼             ▼       │
   더 작음     더 큼          정답이다!     │
     │          │             │           │
     ▼          ▼             ▼           │
 "더 큰 수"  "더 작은 수"   축하 메시지 출력
     │          │             │           │
     └──────────┴──────┬──────┘           │
                        ▼                 │
               게임 종료 (break)──────────┘

💡 핵심 개념 요약
| 개념             | 쉽게 설명                            |
| -------------- | -------------------------------- |
| `Random`       | 1\~100 사이의 숫자 중 하나를 무작위로 골라주는 도구 |
| `Scanner`      | 키보드로 입력을 받는 도구                   |
| `while (true)` | 정답을 맞출 때까지 무한히 반복                |
| `if-else`      | 조건에 따라 다른 행동을 하도록 하는 구조          |
| `hint` 변수      | 짝수인지 홀수인지 알려주는 힌트                |
| `attempts++`   | 시도할 때마다 숫자를 1씩 증가시킴              |

🧑‍🏫 게임 예시 (진행 상황)
컴퓨터가 숫자를 정했습니다.
힌트는 짝수입니다.
1~100 사이의 값을 입력 >> 50
→ 더 작은 수입니다.

1~100 사이의 값을 입력 >> 30
→ 더 큰 수입니다.

1~100 사이의 값을 입력 >> 42
→ 3회 만에 맞췄습니다.
→ 게임을 종료합니다.

------------------------------------------------------------------------------------------------
String hint = (target % 2 == 0) ? "짝수" : "홀수";
이 코드는 자바에서 "어떤 숫자가 짝수인지 홀수인지 판단해서 그 결과를 저장하는" 아주 똑똑한 한 줄 코드예요.
하나씩 쪼개서 살펴볼게요.

String hint = (target % 2 == 0) ? "짝수" : "홀수";

String hint = ...:

String은 "문자열"을 담을 수 있는 상자(변수)를 만들겠다는 뜻이에요. 문자열은 "안녕하세요", "사과", "짝수"처럼 글자들이 모인 것을 말해요.
hint는 그 상자의 이름이에요. 나중에 이 상자에 담긴 내용을 hint라고 부르면 돼요.
=는 "오른쪽에 있는 값을 왼쪽 상자에 넣어라"는 의미예요.
target % 2 == 0: 이 부분이 가장 중요해요!

target : 이건 **"어떤 숫자"**를 말해요. 예를 들어 target이라는 상자에 10이 들어있을 수도 있고, 7이 들어있을 수도 있어요.
%: 이건 **"나머지"**를 계산하는 기호예요. 예를 들어 10 % 3은 10을 3으로 나눈 나머지인 1이 돼요. 7 % 2는 7을 2로 나눈 나머지인 1이 되고요.
target % 2: target이라는 숫자를 2로 나눈 나머지를 계산하라는 뜻이에요.
짝수(예 : 4, 10, 100)는 2로 나누면 나머지가 항상 0이 돼요.
홀수(예 : 3, 7, 99)는 2로 나누면 나머지가 항상 1이 돼요.
== 0 : "그 나머지가 0과 같니?"라고 묻는 거예요.
만약 target이 짝수라면 target % 2는 0이 되니까 0 == 0은 **참(true)**이 돼요.
만약 target이 홀수라면 target % 2는 1이 되니까 1 == 0은 **거짓(false)**이 돼요.
? "짝수" : "홀수": 이 부분은 "삼항 연산자" 또는 "조건 연산자"라고 부르는데, 쉽게 말해 **"물어보고 답하기"**라고 생각하시면 돼요.

? : "앞에 물어본 결과가 참(true)이야?"
"짝수" : "만약 참(true)이면 이 값을 선택해!"
: : "아니면 (거짓(false)이면)"
"홀수" : "이 값을 선택해!"
이 모든 것을 합쳐서 다시 설명해볼게요.

"만약 target이라는 숫자를 2로 나눈 나머지가 0이라면 (target % 2 == 0이 참이라면), hint라는 상자에 '짝수'라는 글자를 넣어라. 그렇지 않다면 (나머지가 0이 아니라면), hint라는 상자에 '홀수'라는 글자를 넣어라."

예시 : target에 10이 들어있다고 가정해볼게요.

10 % 2는 0이에요.
0 == 0은 참(true)이에요.
그러면 ? 다음의 "짝수"가 선택돼요.
결과적으로 hint 상자에는 "짝수"가 저장됩니다.
target에 7이 들어있다고 가정해볼게요.

7 % 2는 1이에요.
1 == 0은 거짓(false)이에요.
그러면 : 다음의 "홀수"가 선택돼요.
결과적으로 hint 상자에는 "홀수"가 저장됩니다.
어떤가요? 이 한 줄의 코드가 target의 값에 따라 자동으로 "짝수" 또는 "홀수"라는 힌트를 hint 상자에 넣어주는 똑똑한 역할을 한다는 것을 이해하셨기를 바랍니다!
----------------------------------------------------------------------------------------------------------------------------------------------------------
"Random random = new Random();" 이 코드가 어떤 의미인지 궁금하시군요! 하나씩 자세히 설명해 드릴게요.
 설계도   도구   새로운 랜덤 도구

 1. Random (클래스 이름)
이름 그대로 **"무작위"**를 뜻하는 단어죠? 자바에서 Random은 **"랜덤한 숫자를 만들어주는 도구"**라고 생각하시면 돼요. 마치 주사위를 던지는 것처럼 예측할 수 없는 숫자를 만들어주는 역할을 합니다.

여기서 Random은 **클래스(Class)**라고 부르는데, 클래스는 특정 기능을 수행하는 객체를 만들기 위한 설계도 또는 틀이라고 이해하시면 됩니다. 예를 들어, 우리가 집을 짓기 위해 설계도가 필요하듯이, 자바에서 Random 객체(실제로 사용하는 주사위)를 만들기 위해 Random이라는 설계도가 필요한 거죠.

2. random (변수 이름)
여기서 random은 우리가 만든 "랜덤한 숫자를 만들어주는 도구"를 가리키는 이름이에요. 컴퓨터 메모리 어딘가에 이 도구가 만들어지면, 우리는 random이라는 이름을 통해 이 도구를 사용할 수 있습니다.

이것을 **변수(Variable)**라고 부릅니다. 변수는 마치 상자와 같아서, 어떤 값을 담아두고 나중에 꺼내 쓸 수 있도록 이름을 붙여놓은 것이라고 생각하시면 돼요. 여기서는 Random 타입의 객체를 담는 상자인 셈이죠.

3. new Random() (객체 생성)
이 부분이 가장 핵심적인데요. new라는 키워드는 "새롭게 만들어라!"라는 명령이에요.

new Random()은 Random 설계도(클래스)를 바탕으로 실제로 사용할 수 있는 "랜덤 도구"를 하나 만들어내는 과정입니다.
이처럼 설계도를 통해 만들어진 실제 도구를 객체(Object) 또는 **인스턴스(Instance)**라고 부릅니다.
마치 집 설계도(클래스)를 가지고 실제로 집(객체)을 짓는 것과 같아요. 설계도만으로는 살 수 없지만, 설계도대로 지어진 집은 실제로 들어가서 생활할 수 있죠.

4. = (대입 연산자)
이 등호는 수학에서의 "같다"는 의미보다는 "오른쪽에 있는 것을 왼쪽에 넣어라" 또는 **"오른쪽에 있는 것을 왼쪽에 연결해라"**라는 의미예요.

그래서 Random random = new Random(); 이 문장은

"새로운 랜덤 도구(new Random())를 하나 만들어서,"
"그 도구를 random이라는 이름(random)으로 사용할 수 있도록 연결해 줘(=)."
"그리고 이 random이라는 이름은 Random 설계도에 따라 만들어진 도구야(Random)"
라고 해석할 수 있습니다.

정리하자면:
Random random = new Random();

이 한 줄의 코드는 **"앞으로 우리가 랜덤한 숫자를 필요로 할 때 random이라는 이름을 통해서 랜덤 숫자를 만들어주는 도구를 사용하겠다"**는 선언이자 준비 과정이라고 보시면 됩니다.

이제 이 random을 가지고 다음과 같이 랜덤 숫자를 만들어낼 수 있어요.

Java

Random random = new Random(); // 랜덤 도구를 준비합니다.

int randomNumber = random.nextInt(100); // 0부터 99 사이의 랜덤 정수를 만듭니다.
System.out.println("생성된 랜덤 숫자: " + randomNumber);
Random random = new Random(); 시각적으로 이해하기
이 코드는 "주사위 만드는 설계도(Random 클래스)를 가지고 실제 주사위(Random 객체)를 하나 만들어서, 그 주사위를 'random'이라는 이름표를 붙여 앞으로 사용할게!" 라고 말하는 것과 같아요.

       +-------------------+         +---------------------+
       |   Random 클래스   |         |    new Random()     |
       |  (주사위 설계도)   | ---->   |  (새로운 주사위 생성) |
       +-------------------+         +---------------------+
              ^                             |
              |                             |
              |                             v
       +------------------------------------+
       |          random 변수             |
       |   (생성된 주사위를 가리키는 이름표)  |
       +------------------------------------+

--------------------------------------------------------------------------------------------------------------
int target = random.nextInt(100) + 1; 설명
이 코드는 "1부터 100 사이의 무작위 정수"를 만들어서 target이라는 이름의 변수에 저장하는 역할을 합니다. 하나씩 자세히 뜯어볼게요.

1. int (자료형)
int는 **정수(Integer)**를 의미해요. 자바에서는 변수에 어떤 종류의 데이터를 저장할지 미리 알려줘야 하는데, int는 소수점 없는 숫자(예: 1, 50, -10)를 저장할 때 사용해요.

비유: 마치 물을 담을 때는 물컵을, 밥을 담을 때는 밥그릇을 사용하는 것처럼, 정수를 담을 때는 int라는 자료형을 사용한다고 생각하시면 돼요.
2. target (변수 이름)
target은 우리가 만든 무작위 숫자를 저장할 **변수(Variable)**의 이름이에요. 아까 random 변수처럼, 이 변수도 메모리 공간에 특정 값을 담아두고 나중에 target이라는 이름으로 그 값을 꺼내 쓸 수 있게 해주는 역할을 합니다.

3. = (대입 연산자)
이 등호는 역시 "오른쪽에 있는 값을 왼쪽에 넣어라"라는 의미입니다.

4. random.nextInt(100) (랜덤 숫자 생성)
이 부분이 중요해요!

random은 우리가 앞에서 Random random = new Random(); 코드를 통해 만든 랜덤 도구를 가리키는 이름이에요.

.nextInt()는 random 도구가 가지고 있는 여러 기능 중 하나로, "다음 정수를 만들어줘"라는 의미를 가집니다.

괄호 안의 100은 "0부터 (100-1)까지의 정수 중에서 하나를 뽑아줘"라는 뜻이에요. 즉, 0부터 99까지의 숫자 중 하나를 무작위로 만들어냅니다.

주의할 점: nextInt(N)은 0부터 N-1까지의 숫자를 반환한다는 것을 꼭 기억해 주세요. (예: nextInt(100)은 0부터 99까지, nextInt(10)은 0부터 9까지)
5. + 1 (숫자 범위 조정)
random.nextInt(100)은 0부터 99까지의 숫자를 만들어요. 하지만 우리가 원하는 것은 1부터 100까지의 숫자였죠?

여기에 + 1을 해주면,

만약 random.nextInt(100)이 0을 만들었다면 0 + 1 = 1이 되고,
만약 random.nextInt(100)이 99를 만들었다면 99 + 1 = 100이 됩니다.
결과적으로 random.nextInt(100) + 1은 1부터 100까지의 무작위 정수를 만들어내게 되는 거죠.

정리하자면:
int target = random.nextInt(100) + 1;

이 코드는 **"주사위처럼 숫자를 뽑아주는 도구(random)를 이용해서 0부터 99까지의 숫자 중 하나를 뽑고, 거기에 1을 더해서 최종적으로 1부터 100까지의 숫자 중 하나를 만들어 target이라는 이름표가 붙은 상자에 저장해라"**는 의미입니다.

시각적으로 이해하기
+-------------------+      +---------------------------------+      +-----------------------+
|  random 도구     | ---> |   .nextInt(100) 실행           | ---> |      결과값 (0~99)    |
|  (주사위 역할)     |      |  (0부터 99까지 숫자 중 하나 뽑기) |      |                       |
+-------------------+      +---------------------------------+      +-----------------------+
                                                                              |
                                                                              v
                                                                    +-----------------------+
                                                                    |        + 1            |
                                                                    |   (숫자에 1 더하기)    |
                                                                    +-----------------------+
                                                                              |
                                                                              v
                                                                    +-----------------------+
                                                                    |   최종 결과값 (1~100)  |
                                                                    +-----------------------+
                                                                              |
                                                                              v
                                                                    +-----------------------+
                                                                    |   target 변수 (상자)   |
                                                                    |  (최종 결과값 저장)    |
                                                                    +-----------------------+
---------------------------------------------------------------------------------------------------------
"int attempts = 0;" 이 코드는 아주 간단하면서도 중요한 역할을 하는 코드예요. 어떤 의미인지 설명해 드릴게요!

int attempts = 0; 설명
이 코드는 "시도 횟수를 셀 수 있는 정수형 변수를 만들고, 그 값을 0으로 시작하게 해라"라는 의미를 가지고 있어요.

1. int (자료형)
앞서 설명드렸듯이, int는 **정수(Integer)**를 나타내는 자료형이에요. 소수점이 없는 숫자(예: 1, 2, 3...)를 저장할 때 사용하죠. attempts 변수에 0, 1, 2... 와 같은 숫자가 저장될 것이기 때문에 int를 사용한 거예요.

2. attempts (변수 이름)
attempts는 이 변수의 이름이에요. "시도"라는 뜻을 가지고 있죠. 프로그램 안에서 어떤 일을 몇 번 시도했는지 세는 용도로 이 변수를 사용할 거예요. 예를 들어, 사용자가 정답을 맞출 때까지 몇 번 시도했는지 기록할 때 이 attempts 변수를 활용할 수 있어요.

3. = (대입 연산자)
이 등호는 "오른쪽에 있는 값을 왼쪽에 넣어라"는 의미예요.

4. 0 (초기값)
0은 attempts 변수에 처음으로 저장되는 값이에요. 보통 어떤 횟수를 셀 때는 0부터 시작하는 것이 자연스럽죠. "아직 아무것도 시도하지 않았어"라는 의미로 0을 넣어주는 거예요.

정리하자면:
int attempts = 0;

이 코드는 "앞으로 '시도 횟수'를 기록할 attempts라는 정수형 상자를 만들고, 그 상자 안에 초기값으로 숫자 0을 넣어줘" 라는 의미입니다.

시각적으로 이해하기
+---------------------+
|      int attempts   |  <--- "시도 횟수"를 기록할 정수형 상자를 만들 거야!
+---------------------+
          |
          v
+---------------------+
|   attempts 상자     |
|   (현재 값: 0)       |  <--- 상자 안에 처음으로 숫자 0을 넣어놔.
+---------------------+
이 attempts 변수는 주로 루프(반복문) 안에서 사용자가 특정 행동을 할 때마다 1씩 증가시켜서 시도 횟수를 기록하는 데 쓰여요. 예를 들면:

Java

int attempts = 0; // 시도 횟수 상자를 0으로 초기화

// (게임 루프나 특정 작업이 반복되는 코드)

// 사용자가 무언가를 시도할 때마다
attempts = attempts + 1; // 또는 attempts++; 라고 줄여 쓸 수 있어요.
System.out.println("현재 시도 횟수: " + attempts);
--------------------------------------------------------------------------------------------------------
int number = scanner.nextInt(); 설명
이 코드는 "사용자가 키보드로 입력한 정수(숫자)를 읽어와서 number라는 이름의 변수(상자)에 저장해라"는 의미예요.

이 코드가 실행되기 전에는 보통 앞에서 설명드렸던 if (scanner.hasNextInt()) 같은 검증 과정이 있었을 거예요. 즉, 이미 컴퓨터는 사용자가 숫자를 제대로 입력했는지 확인을 마친 상태라고 보시면 됩니다.

1. int (자료형)
앞서 여러 번 설명드렸듯이, int는 **정수(Integer)**를 의미해요. 이 number 변수에는 사용자가 입력한 소수점 없는 숫자(예: 1, 50, 99)가 저장될 것이기 때문에 int를 사용합니다.

2. number (변수 이름)
number는 "추측"이라는 뜻이죠? 이 변수는 사용자가 게임에서 추측한 숫자를 저장하는 **변수(상자)**의 이름이에요. 사용자가 키보드로 입력한 숫자가 이 number라는 상자 안에 들어가게 됩니다.

3. = (대입 연산자)
이 등호는 "오른쪽에 있는 값을 왼쪽에 넣어라"는 의미예요. 여기서는 scanner.nextInt()가 읽어온 값을 number 변수에 넣어주는 역할을 합니다.

4. scanner.nextInt() (정수 입력 읽기)
scanner는 사용자로부터 키보드 입력을 받는 도구를 가리키는 이름이에요.
.nextInt()는 scanner 도구가 가지고 있는 기능 중 하나로, "다음으로 입력된 내용을 정수 형태로 읽어와라"는 뜻이에요.
이 메서드는 엔터(Enter) 키가 눌리기 전까지 입력된 내용을 정수로 변환해서 반환해 줍니다.
예를 들어, 사용자가 키보드로 75를 입력하고 엔터를 눌렀다면, scanner.nextInt()는 숫자 75를 반환하는 거죠.
정리하자면:
int number = scanner.nextInt();

이 코드는 **"사용자가 입력한 숫자를 scanner 도구로 읽어와서, 그 숫자를 number라는 이름의 정수형 상자에 저장해라"**는 의미입니다.

시각적으로 이해하기
+------------------------------------+
|           사용자             |
|        (키보드로 숫자 입력)       |
|             예: 75             |
+------------------------------------+
              |
              v
+------------------------------------+
|           scanner 도구           |
|        (입력 대기 및 인식)         |
+------------------------------------+
              |
              v
+------------------------------------+
|       scanner.nextInt()          |
|      (입력된 '75'를 정수로 변환)     |
+------------------------------------+
              |
              v
+------------------------------------+
|           int number              |
|        (정수형 상자 준비)          |
+------------------------------------+
              |
              v
+------------------------------------+
|          number 상자             |
|         (현재 값: 75)            |  <--- 변환된 숫자 75가 number 상자에 저장됩니다.
+------------------------------------+
이 코드는 사용자의 입력을 프로그램이 실제로 사용할 수 있는 형태로 변환하여 저장하는 매우 중요한 단계입니다. 
이렇게 저장된 number 값은 나중에 target 값과 비교하는 등 게임의 로직을 진행하는 데 사용될 거예요.
-------------------------------------------------------------------------------------------------------
if (number < 1 || number > 100) { ... } 설명
이 코드는 "만약 사용자가 입력한 number가 1보다 작거나 100보다 크다면 (즉, 1에서 100 사이의 범위를 벗어나면)" 특정 행동을 해라"는 조건문이에요.

1. if (조건문)
앞에서 설명드린 것처럼, if는 "만약 ~라면" 이라는 조건을 설정하는 문법이에요. 괄호 () 안의 조건이 true이면 {} 안의 코드가 실행되고, false이면 실행되지 않아요.

2. number (변수 이름)
여기서 number는 사용자가 방금 입력해서 int guess = scanner.nextInt();와 같은 코드로 저장된 숫자 값을 가지고 있는 변수예요. 앞의 예시에서는 guess 변수였지만, 이 코드에서는 number라는 이름으로 사용되었네요. (변수 이름은 개발자가 정하기 나름이에요!)

3. < 1 (미만 비교)
number < 1은 "number가 1보다 작은가?"를 묻는 조건이에요.

예를 들어, number가 0이나 -5라면 이 조건은 true가 됩니다.
number가 1이나 50이라면 이 조건은 false가 됩니다.
4. > 100 (초과 비교)
number > 100은 "number가 100보다 큰가?"를 묻는 조건이에요.

예를 들어, number가 101이나 200이라면 이 조건은 true가 됩니다.
number가 100이나 50이라면 이 조건은 false가 됩니다.
5. || (논리 OR 연산자)
두 개의 파이프 기호 ||는 논리 OR 연산자라고 부르는데, "~이거나 또는 ~이거나" 라는 의미를 가져요. 이 연산자는 두 조건 중 어느 하나라도 true이면 전체 조건이 true가 됩니다.

(number < 1) 또는 (number > 100)
즉, number가 1보다 작거나 혹은 100보다 크다면, if문 안의 코드가 실행된다는 뜻이에요.
예시:
number가 0일 때: (0 < 1)은 true, (0 > 100)은 false. true || false는 true이므로 if문 실행.
number가 50일 때: (50 < 1)은 false, (50 > 100)은 false. false || false는 false이므로 if문 실행 안 함.
number가 101일 때: (101 < 1)은 false, (101 > 100)은 true. false || true는 true이므로 if문 실행.
System.out.println("1~100 사이의 숫자만 입력하세요."); 설명
이 코드는 위 if문의 조건이 true일 경우 (즉, number가 1~100 범위를 벗어났을 때) 실행되는 부분입니다.

System.out.println()은 괄호 () 안의 내용을 화면에 출력하는 기능이에요. 여기서는 사용자에게 "1~100 사이의 숫자만 입력하세요."라는 경고 메시지를 보여주는 거죠.
continue; 설명
이 코드 역시 if문의 조건이 true일 때 실행됩니다.

continue;가 실행되면, 현재 진행 중인 반복문(예: while 또는 for 루프)의 나머지 부분을 건너뛰고, 곧바로 반복문의 처음으로 돌아가 다음 반복을 시작하게 합니다.
여기서는 사용자가 1~100 범위를 벗어난 숫자를 입력했을 때, 경고 메시지를 보여준 후 continue를 통해 다시 숫자를 입력받도록 반복문의 처음으로 돌아가는 역할을 해요.
전체적인 흐름 정리:
if (number < 1 || number > 100) { ... } 코드는 다음과 같은 흐름으로 작동합니다.

숫자 입력 대기: 프로그램이 사용자에게 1~100 사이의 숫자를 입력하라고 기다립니다.
입력 값 확인: 사용자가 숫자를 입력하면, 해당 숫자가 number 변수에 저장됩니다.
범위 조건 검사:
만약 number가 1보다 작거나 100보다 크다면 (number < 1 || number > 100이 true라면`):
화면에 "1~100 사이의 숫자만 입력하세요."라는 경고 메시지를 출력합니다.
continue를 통해 현재 반복을 중단하고, 다시 처음부터 입력을 받도록 합니다.
만약 number가 1에서 100 사이라면 (number < 1 || number > 100이 false라면`):
if문 안의 코드는 실행되지 않고, if문 다음의 코드가 계속 실행됩니다. (예: number와 정답 target을 비교하는 코드)
시각적으로 이해하기
+------------------------------------+
|           반복문 시작              |
|           (숫자 입력 요구)         |
+------------------------------------+
              |
              v
+------------------------------------+
|       사용자 입력 숫자를        |
|      'number' 변수에 저장          |
+------------------------------------+
              |
              v
+------------------------------------+
|    if (number < 1 || number > 100) |
|    (number가 1~100 범위를 벗어남?) |
+------------------------------------+
       |          |
       |  Yes (범위 벗어남) | No (범위 내)
       v          v
+-----------------------+   +-----------------------+
|  System.out.println() |   |  (if문 다음 코드로 진행) |
|  ("1~100 사이만 입력")  |   |   (예: 숫자 비교 로직)  |
+-----------------------+   +-----------------------+
       |
       v
+-----------------------+
|    continue;          |
|    (반복문 처음으로)    |
+-----------------------+
이 코드는 사용자가 게임의 규칙에 맞는 숫자를 입력하도록 강제하여, 프로그램이 의도치 않은 값으로 인해 오작동하는 것을 방지해주는 역할을 합니다.
------------------------------------------------------------------------------------------------------------
attempts++; 설명
이 코드는 **"attempts 변수에 저장된 값을 1 증가시켜라"**는 의미예요.

단계별로 자세히 살펴볼게요.

1. attempts (변수)
attempts는 앞서 우리가 "시도 횟수"를 기록하기 위해 만든 정수형 변수예요. 예를 들어, 게임을 시작할 때 int attempts = 0;으로 0을 넣어놨었죠.

2. ++ (증가 연산자)
두 개의 더하기 기호 ++는 **증가 연산자(Increment Operator)**라고 불러요. 이 연산자는 변수에 저장된 값을 1씩 증가시키는 특별한 기능을 합니다.

attempts++;는 다음과 같은 코드와 완전히 같은 의미예요:

attempts = attempts + 1; (attempts의 현재 값에 1을 더해서 다시 attempts에 저장)
attempts += 1; (attempts에 1을 더해라)
이 세 가지 표현 중에서 attempts++;가 가장 간결하기 때문에 프로그래머들이 즐겨 사용해요.

왜 attempts++를 사용할까요?
이 코드는 주로 어떤 행동이 발생할 때마다 횟수를 세고 싶을 때 사용해요. 예를 들어, 숫자 맞추기 게임에서 사용자가 숫자를 한 번 입력할 때마다 attempts 값을 1씩 늘려 나중에 "당신은 X번 만에 정답을 맞췄습니다!"라고 알려줄 수 있는 거죠.

시각적으로 이해하기
+---------------------+
|   attempts 상자     |
|   (현재 값: 0)       |  <-- 처음에는 0이 들어있어요.
+---------------------+
          |
          v
  +-----------------+
  |   attempts++;   |  <-- 이 코드가 실행됩니다.
  |  (1을 더해줘!)    |
  +-----------------+
          |
          v
+---------------------+
|   attempts 상자     |
|   (새로운 값: 1)       |  <-- 이제 1이 되었어요.
+---------------------+
          |
          v
  +-----------------+
  |   attempts++;   |  <-- 한 번 더 실행되면?
  +-----------------+
          |
          v
+---------------------+
|   attempts 상자     |
|   (새로운 값: 2)       |  <-- 2가 됩니다.
+---------------------+
attempts++;는 이처럼 변수의 값을 1씩 쉽게 늘릴 수 있게 해주는 편리한 문법입니다.

-------------------------------------------------------------------------------------------------------

if-else if-else 구조 설명
이 코드는 if, else if, else라는 세 가지 조건을 차례대로 검사하는 구조예요. 마치 갈림길에서 여러 가지 길 중 하나를 선택하는 것과 같죠.

Java

if (number < target) { // 첫 번째 갈림길: 입력 숫자가 정답보다 작은가?
    System.out.println("더 큰 수입니다.");
} else if (number > target) { // 두 번째 갈림길: 첫 번째가 아니면, 입력 숫자가 정답보다 큰가?
    System.out.println("더 작은 수입니다.");
} else { // 마지막 갈림길: 위 두 가지가 다 아니라면 (즉, 입력 숫자가 정답과 같은가?)
    System.out.println(attempts + "회 만에 맞췄습니다.");
    System.out.println("=== 게임을 종료합니다. ===");
    break;
}
하나씩 자세히 살펴볼게요.

1. if (number < target)
이것은 첫 번째 조건이에요.

number: 사용자가 추측해서 입력한 숫자예요.
<: 작다는 의미의 비교 연산자예요.
target: 컴퓨터가 무작위로 생성한 정답 숫자예요.
이 줄은 "만약 사용자가 입력한 number가 target보다 작으면" 이라는 의미가 됩니다.

예시: number가 50이고 target이 70일 경우, (50 < 70)은 true가 되므로 이 if 블록 안의 코드가 실행돼요.
System.out.println("더 큰 수입니다.");: 사용자에게 "더 큰 수를 입력하세요"라는 힌트를 화면에 출력합니다.
2. else if (number > target)
이것은 두 번째 조건이에요. if문 앞의 조건(number < target)이 **거짓(false)**일 때만 이 else if 조건을 검사하게 돼요.

else if: 앞의 if 조건이 false일 경우에만 다음 조건을 검사하겠다는 뜻이에요.
>: 크다는 의미의 비교 연산자예요.
이 줄은 "앞의 조건(number < target)이 아니면서, 만약 사용자가 입력한 number가 target보다 크면" 이라는 의미가 됩니다.

예시: number가 80이고 target이 70일 경우, 앞의 if (80 < 70)은 false이므로 이 else if (80 > 70)을 검사하게 되고, 이것은 true가 되므로 이 else if 블록 안의 코드가 실행돼요.
System.out.println("더 작은 수입니다.");: 사용자에게 "더 작은 수를 입력하세요"라는 힌트를 화면에 출력합니다.
3. else
이것은 마지막 조건이에요. 앞의 모든 if 또는 else if 조건들이 **모두 거짓(false)**일 때만 이 else 블록 안의 코드가 실행돼요.

else: 앞의 모든 조건들이 false일 때 실행되는 "그 외의 경우"를 의미해요.
이 else 블록은 결국 "만약 number가 target보다 작지도 않고, number가 target보다 크지도 않다면" 이라는 의미가 됩니다. 논리적으로 생각해보면, 이는 number와 target이 같다는 뜻이죠! 즉, 사용자가 정답을 맞췄다는 의미예요.

System.out.println(attempts + "회 만에 맞췄습니다.");: attempts 변수에 저장된 시도 횟수를 출력해서, "N회 만에 맞췄습니다." 와 같은 메시지를 보여줍니다.
System.out.println("=== 게임을 종료합니다. ===");: 게임이 끝났다는 안내 메시지를 출력합니다.
break;: 이 키워드는 현재 실행 중인 **반복문(예: while 또는 for 문)**을 즉시 종료시키는 역할을 해요. 정답을 맞췄으니 더 이상 게임을 진행할 필요가 없겠죠? break가 실행되면, 프로그램은 반복문 다음의 코드로 넘어가거나, 더 이상 코드가 없으면 완전히 종료됩니다.
전체적인 흐름 정리:
이 if-else if-else 구조는 사용자의 입력을 받으면 다음과 같이 작동합니다:

입력 < 정답? (number < target)
Yes: "더 큰 수입니다." 출력. (다음 턴으로 넘어감)
No: 다음 조건으로 넘어감.
입력 > 정답? (number > target)
Yes: "더 작은 수입니다." 출력. (다음 턴으로 넘어감)
No: 다음 조건으로 넘어감.
그 외의 경우 (입력 == 정답):
시도 횟수 출력.
게임 종료 메시지 출력.
break;를 통해 게임 반복을 완전히 끝냅니다.
시각적으로 이해하기
+------------------------------------+
|         사용자 숫자 (number)       |
|         정답 숫자 (target)         |
+------------------------------------+
              |
              v
+------------------------------------+
|    if (number < target)           |
|    (입력 < 정답 ?)                 |
+------------------------------------+
       |          |
       |  Yes     | No
       v          v
+-----------------------+   +------------------------------------+
|  System.out.println() |   |    else if (number > target)       |
|  ("더 큰 수입니다.")   |   |    (입력 > 정답 ?)                 |
+-----------------------+   +------------------------------------+
       |                              |          |
       |                              |  Yes     | No
       v                              v          v
       |                    +-----------------------+   +-----------------------+
       |                    |  System.out.println() |   |        else           |
       |                    |  ("더 작은 수입니다.")  |   |    (입력 == 정답)     |
       |                    +-----------------------+   +-----------------------+
       |                              |                          |
       |                              v                          v
       |                              |                +-----------------------+
       |                              |                |   System.out.println()  |
       |                              |                |   (정답 메시지 + 횟수) |
       |                              |                +-----------------------+
       |                              |                          |
       |                              v                          v
       |                              |                +-----------------------+
       |                              |                |    System.out.println() |
       |                              |                |    ("게임 종료")      |
       +------------------------------+                          |
              (다음 반복으로 이동)                               v
                                                       +-----------------------+
                                                       |         break;        |
                                                       |   (반복문 즉시 종료)    |
                                                       +-----------------------+

















*/