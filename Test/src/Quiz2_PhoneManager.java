import java.util.ArrayList; // 여러 개의 연락처를 저장할 수 있는 리스트를 사용하기 위해 가져옴
import java.util.Scanner; // 사용자로부터 입력을 받기 위해 Scanner 클래스를 가져옴

public class Quiz2_PhoneManager {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // 키보드 입력을 받기 위한 Scanner 객체 생성
        ArrayList<Quiz2_Phone> phoneList = new ArrayList<>(); // 연락처 정보를 저장할 리스트 생성

        System.out.print("인원수 >> "); // 몇 명의 연락처를 입력할지 사용자에게 물어봄
        int n = Integer.parseInt(scanner.nextLine()); // 입력받은 문자열을 숫자(int)로 변환

        // 입력받은 인원수만큼 반복해서 연락처 정보 받기
        for (int i = 0; i < n; i++) {
            System.out.print("이름과 전화번호(번호는 연속적으로 입력), 주소 >> "); // 사용자에게 한 줄로 입력 요청
            String input = scanner.nextLine(); // 한 줄 전체를 문자열로 입력 받음

            // 입력된 문자열을 공백(" ")을 기준으로 최대 3부분으로 나눔
            // 예를 들어 "홍길동 01012345678 서울시 강남구" -> ["홍길동", "01012345678", "서울시 강남구"]
            String[] parts = input.split(" ", 3);

            // 나눠진 부분을 각각 변수에 저장
            String name = parts[0]; // 첫 번째 부분: 이름
            String tel = parts[1]; // 두 번째 부분: 전화번호
            String address = parts[2]; // 세 번째 부분: 주소 (공백 포함 가능)

            // 새로운 Quiz2_Phone 객체를 생성해서 리스트에 저장
            phoneList.add(new Quiz2_Phone(name, tel, address));
        }
        System.out.println("저장되었습니다..."); // 입력 완료 메시지 출력

        // 연락처 검색 기능 시작 - 무한 반복
        while (true) {
            System.out.print("\n검색할 이름 >> "); // 검색할 이름 입력 요청
            String searchName = scanner.nextLine(); // 사용자 입력 저장

            if (searchName.equals("exit")) { // 입력한 이름이 "exit"이면 종료
                System.out.println("프로그램을 종료합니다...");
                break; // 반복문 종료, 프로그램 끝
            }

            boolean found = false; // 찾았는지 여부를 저장하는 변수, 처음엔 못 찾음 상태(false)

            // 리스트에 저장된 모든 연락처를 하나씩 검사
            for (Quiz2_Phone p : phoneList) {
                if (p.getName().equals(searchName)) { // 이름이 검색어와 같으면
                    // 해당 연락처 정보를 출력
                    System.out.println(p.getName() + "의 번호와 주소는 " + p.getTel() + ", " + p.getAddress() + " 입니다.");
                    found = true; // 찾았다는 표시
                    break; // 더 이상 검색하지 않고 반복 종료
                }
            }

            if (!found) { // 리스트에 검색 이름이 없으면
                System.out.println(searchName + " 은(는) 없습니다."); // 없다는 메시지 출력
            }
        }
        scanner.close(); // Scanner 자원 해제 (입력 종료)
    }
}


/*
그림으로 이해하기
입력받기
사용자: 인원수 입력 (예: 3)

반복 3번:
  이름 전화번호 주소 한 줄로 입력 (예: 홍길동 01012345678 서울시 강남구)
  → 문자열을 3부분으로 쪼개서 객체 생성 → 리스트에 저장

  리스트 저장 구조
phoneList
+-----------------------------+
| Quiz2_Phone 객체1            |  → name="홍길동", tel="01012345678", address="서울시 강남구"
| Quiz2_Phone 객체2            |  → ...
| Quiz2_Phone 객체3            |  → ...
+-----------------------------+

검색 과정
사용자: 검색할 이름 입력 (예: 홍길동)

리스트 순회하면서 각 객체의 name과 비교
  - 같으면 해당 객체의 전화번호와 주소 출력 후 종료
  - 없으면 "없습니다" 출력

"exit" 입력 시 프로그램 종료

1. 전체 프로그램 흐름도
+--------------------+
| 프로그램 시작       |
+--------------------+
          |
          v
+--------------------+
| 인원수 입력 받기    | <--- 사용자 입력 (예: 3)
+--------------------+
          |
          v
+-----------------------------+
| n번 반복하여 연락처 입력    |  <--- 이름, 전화번호, 주소 한 줄로 입력받음
+-----------------------------+
          |
          v
+--------------------+
| "저장되었습니다" 출력 |
+--------------------+
          |
          v
+------------------------+
| 검색할 이름 입력 받기    | <--- 무한 반복 시작
+------------------------+
          |
          v
+--------------------------+
| 입력한 이름이 "exit"?    | ---예---> 프로그램 종료
+--------------------------+
          | 아니오
          v
+-----------------------------+
| 리스트에서 이름 검색         |
+-----------------------------+
          |
          v
+---------------------------+
| 이름 찾았는가?            | ---예---> 연락처 출력 -> 다시 검색 입력 받기
+---------------------------+
          | 아니오
          v
+------------------------------+
| "없습니다" 출력 -> 다시 검색 입력 받기 |
+------------------------------+

2. 입력 및 저장 과정 (배열 리스트 내부 모습)
사용자 입력:
홍길동 01012345678 서울시 강남구

phoneList 리스트 (ArrayList)
+-------------------------------+
| [0] Quiz2_Phone 객체 (홍길동)    |
|  - name = "홍길동"               |
|  - tel = "01012345678"          |
|  - address = "서울시 강남구"    |
+-------------------------------+

3. 검색 과정 (간단한 순회 예시)
검색어: "홍길동"

phoneList 순회:
[0] 이름: "홍길동" --- 일치! → 정보 출력
"홍길동의 번호와 주소는 01012345678, 서울시 강남구 입니다."

시각적 도식 예시
사용자 입력 ----> [ 입력받은 문자열 ] ----> split()으로 3부분 나누기 ----> new Quiz2_Phone 객체 생성 ----> phoneList 저장

사용자 검색 입력 ----> phoneList 순회 ----> 이름 비교 ----> 찾으면 정보 출력 / 못 찾으면 "없습니다" 출력 ----> 다시 검색

------------------------------------------------------------------------------------------------------------------------

📱 Quiz2_PhoneManager 전체 흐름 요약 (비전공자용 시각적 설명)
🎯 프로그램의 목표
👉 사람 여러 명의 이름, 전화번호, 주소를 저장하고, 이름으로 검색할 수 있는 전화번호부를 만든다.
┌─────────────┐
│ 프로그램 시작 │
└────┬────────┘
     ▼
┌──────────────────────────────┐
│  몇 명의 연락처를 입력할지 물어봄 │ ← 예: 2명
└────┬─────────────────────────┘
     ▼
┌──────────────────────────────┐
│ 이름, 전화번호, 주소를 각각 입력 │
│ 예: "홍길동 01012345678 서울시" │
└────┬─────────────────────────┘
     ▼
┌──────────────────────────────┐
│ Quiz2_Phone 객체로 만들어 저장  │
│ (ArrayList에 추가됨)            │
└────┬─────────────────────────┘
     ▼
┌──────────────────────────────┐
│   입력이 끝나면 "저장되었습니다" 출력 │
└────┬─────────────────────────┘
     ▼
┌──────────────────────────────┐
│     검색 루프 시작 (while)     │
└────┬─────────────────────────┘
     ▼
┌──────────────────────────────┐
│ 검색할 이름을 입력받음        │
│ 예: "홍길동"                   │
└────┬─────────────────────────┘
     ▼
┌──────────────────────────────┐
│ 리스트에서 이름 비교해서 찾기   │
└────┬─────────────────────────┘
     │         │
     ▼         ▼
   찾음       못 찾음
   │             │
   ▼             ▼
 연락처 출력   "없습니다" 메시지 출력
   │             │
   └──────┬──────┘
          ▼
┌──────────────────────────────┐
│ 검색 반복 계속 (exit 입력 시 종료) │
└──────────────────────────────┘

💡 핵심 용어 설명 (쉬운 말로)
| 용어              | 설명                      |
| --------------- | ----------------------- |
| `ArrayList`     | 연락처(객체)를 여러 개 보관하는 상자   |
| `Scanner`       | 사용자로부터 키보드 입력을 받는 도구    |
| `split(" ", 3)` | 문자열을 이름/전화번호/주소로 나누는 도구 |
| `equals()`      | 글자가 같은지 비교하는 방법         |
| `exit`          | 사용자가 종료를 원할 때 입력하는 명령어  |

🧒 예시 사용 흐름
인원수 >> 2
이름과 전화번호(번호는 연속적으로 입력), 주소 >> 홍길동 01011112222 서울특별시
이름과 전화번호(번호는 연속적으로 입력), 주소 >> 김철수 01099998888 부산광역시
저장되었습니다...

검색할 이름 >> 김철수
김철수의 번호와 주소는 01099998888, 부산광역시 입니다.

검색할 이름 >> 박영희
박영희 은(는) 없습니다.

검색할 이름 >> exit
프로그램을 종료합니다...

*/