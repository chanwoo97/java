import java.util.HashMap; // 해시맵 사용을 위한 import
import java.util.Map; // Map 인터페이스 import
import java.util.Scanner; // 사용자 입력을 받기 위한 Scanner import

public class Quiz7_HashMap {
    public static void main(String[] args) {
      Scanner scanner = new Scanner(System.in); // 키보드 입력을 받는 Scanner 객체 생성
      Map<String, Integer> accounts = new HashMap<>(); // 고객 이름과 잔액을 저장할 HashMap 생성

      System.out.println("<< 통장 관리 프로그램입니다. >>"); // 프로그램 안내문 출력

      while (true) { // 무한 반복 시작 (사용자가 exit 입력할 때까지)
            System.out.print("이름과 금액 입력>>"); // 입력 안내 메시지 출력
            String line = scanner.nextLine().trim(); // 한 줄 입력 받고 앞뒤 공백 제거

            if (line.equalsIgnoreCase("exit")) { // 입력이 "exit" (대소문자 구분 없이)이면 종료
                System.out.println("프로그램을 종료합니다...");
                break; // 반복문 종료
            }

            String[] parts = line.split("\\s+"); // 입력을 공백(띄어쓰기) 기준으로 나누기

            if (parts.length != 2) { // 입력이 이름과 금액 두 개가 아니면 오류 메시지 출력 후 다시 입력 받기
                System.out.println("입력 형식이 올바르지 않습니다. 이름과 금액을 띄어쓰기로 구분하여 입력하세요.");
                continue; // 다음 반복으로 건너뜀
            }

            String name = parts[0]; // 첫 번째는 이름
            int amount; // 두 번째는 금액 (숫자여야 함)

            try {
                amount = Integer.parseInt(parts[1]); // 문자열을 숫자로 변환 시도
            } catch (NumberFormatException e) { // 숫자가 아니면 오류 처리
                System.out.println("금액은 숫자로 입력해야 합니다.");
                continue; // 다음 반복으로 건너뜀
            }

            // 기존에 이름이 있으면 잔액에 금액 더하고, 없으면 새로 추가
            accounts.put(name, accounts.getOrDefault(name, 0) + amount);

            // 현재 저장된 모든 고객의 이름과 잔액을 출력
            StringBuilder sb = new StringBuilder();
            for (Map.Entry<String, Integer> entry : accounts.entrySet()) {
                sb.append("(")
                        .append(entry.getKey()) // 고객 이름
                        .append(">")
                        .append(entry.getValue()) // 잔액
                        .append("원)");
            }
            System.out.println(sb.toString()); // 출력
      }

      scanner.close(); // Scanner 자원 해제
    }
}

/*
2. 프로그램의 동작 흐름도
[프로그램 시작]
      |
      v
"이름과 금액 입력>>" 출력
      |
      v
사용자가 입력 (ex: "홍길동 1000")
      |
      v
입력이 "exit"인가? --- 예 --> 프로그램 종료
      |
      아니오
      |
      v
입력을 공백 기준으로 나눔 (2개가 아니면 오류 메시지 출력 후 다시 입력)
      |
      v
두 번째 값이 숫자인가? --- 아니오 --> 오류 메시지 출력 후 다시 입력
      |
      예
      |
      v
해시맵에 이름이 있으면 기존 잔액에 금액 추가, 없으면 새로 추가
      |
      v
모든 고객과 잔액 출력 (예: (홍길동>1500원)(김철수>2000원))
      |
      v
다시 입력 받기 (무한 반복)

3. 시각적 자료: HashMap 데이터 저장 모습
| 이름  | 잔액    |
| --- | ----- |
| 홍길동 | 1500원 |
| 김철수 | 2000원 |
| 이영희 | 500원  |
사용자가 홍길동 1000 입력하면 HashMap에 "홍길동": 1000 저장
다음에 홍길동 500 입력하면 기존 1000 + 500 = 1500으로 업데이트
"김철수 2000" 입력 시 "김철수": 2000 새로 추가

4. 요점 정리
HashMap은 키(이름)와 값(잔액)을 쌍으로 저장하는 자료구조예요.
사용자가 이름과 금액을 입력하면, 그 사람 잔액을 업데이트해요.
exit 입력하면 프로그램이 종료됩니다.
입력 형식이나 금액이 잘못되면 친절한 오류 메시지를 보여줘요.

------------------------------------------------------------------------
🏦 Quiz7_HashMap 통장 관리 프로그램 — 이해하기 쉬운 흐름

📌 프로그램의 목적
사용자가 이름과 금액(입금: 양수, 출금: 음수) 을 입력하면
고객별로 잔액을 관리 (입금은 더하고, 출금은 빼는 것과 같아요)
입력된 모든 고객의 잔액을 화면에 보여줌
"exit" 입력 시 프로그램 종료

🔑 주요 개념
| 개념                         | 설명                                      |
| -------------------------- | --------------------------------------- |
| `HashMap<String, Integer>` | 고객 이름(String)과 잔액(Integer)을 쌍으로 저장하는 상자 |
| `put(key, value)`          | 상자에 값 저장 (기존 값 덮어쓰기)                    |
| `getOrDefault(key, 0)`     | key가 없으면 기본값 0을 가져옴                     |
| `try-catch`                | 입력이 숫자가 아닐 때 오류를 잡아내고 안내                |

📊 실행 흐름 요약 다이어그램
┌─────────────────────────────┐
│ 사용자에게 "이름과 금액 입력"│
└─────────────┬───────────────┘
              │
              ▼
    ┌────────────────────────┐
    │ 입력이 "exit"인가?     │ ── 예 → 종료 및 "프로그램 종료" 출력
    └─────────────┬──────────┘
                  │ 아니오
                  ▼
    ┌────────────────────────┐
    │ 입력을 공백으로 나눔   │
    └─────────────┬──────────┘
                  │
    ┌─────────────▼──────────┐
    │ 입력이 이름과 금액 두 개인가? │ ── 아니오 → 오류 메시지 출력 후 다시 입력
    └─────────────┬──────────┘
                  │ 예
                  ▼
    ┌────────────────────────┐
    │ 금액이 숫자인가?        │ ── 아니오 → 오류 메시지 출력 후 다시 입력
    └─────────────┬──────────┘
                  │ 예
                  ▼
    ┌────────────────────────┐
    │ 이름으로 잔액 업데이트 │
    └─────────────┬──────────┘
                  │
                  ▼
    ┌────────────────────────┐
    │ 모든 고객의 잔액 출력  │
    └────────────────────────┘

📌 예시 입력과 출력
| 입력         | 동작 및 출력                                  |
| ---------- | ---------------------------------------- |
| `홍길동 1000` | 홍길동 잔액 1000원 추가, 출력: (홍길동>1000원)         |
| `홍길동 -200` | 홍길동 잔액에서 200원 차감, 출력: (홍길동>800원)         |
| `김철수 500`  | 김철수 잔액 500원 추가, 출력: (홍길동>800원)(김철수>500원) |
| `exit`     | 종료 메시지 출력 후 프로그램 종료                      |

🛠 코드 핵심 역할 그림
사용자 입력
    ↓
[이름]     [금액] (입력 분리)
    ↓
[잔액 확인] -> 없으면 0으로 시작
    ↓
[기존 잔액 + 입력 금액] -> 저장
    ↓
[모든 고객 잔액 출력]
    ↓
(반복)

*/