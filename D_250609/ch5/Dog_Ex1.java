package D_250609.ch5;

public class Dog_Ex1 extends Animal_Ex1{ // 자식 클래스
    // 부모의 멤버 중에서 name이 있음.
    // 태어난 나라
    private String nation;

    // 부모의 기능중에서, speak
    // speak 기능을 수정해보기. 메소드 이름은 그대로사용하고,
    // 기능 구현만 다르게 함. -> 오버라이딩(@Override 표기함.)
    @Override // 애너테이션이라고 부르고, 컴파일러에게 라벨링(알려주기)
    // 내가 부모 클래스의 기능을 재사용하니, 니가 검사시 잘 검사해줘.
    // 자식 클래스에서,
    // 1) 상속 후, 기능 재정의를 안할 떄, 부모의 speak() 메소드 이용
    // 2) 상속 후, 기능 재정의를 할 때, 자식의 speak() 메소드 이용
    public void speak() {
        System.out.println("난 멍멍이야, 그래서 멍멍할게");
    }

    // 생성자 만들기, 매개변수 2개
    // 주의사항, 기본 생성자를 더이상 지원 안해줌.
    public Dog_Ex1() { // 부모의 생성자가 없어? -> 기본 생성자가 없다고 경고함.
        super(); // 생략이 되어 있음.
    };
    
    public Dog_Ex1(String name, String nation) {
        // name 정의가, 부모 클래스에서 정의를 했음.
        // 부모를 호출하느 키워드 필요함 : super()
        // 부모 클래스에서, 기본 생성자는 만들어줌. 단, 매개변수 생성자가 없을 경우에는 
        // super(); 
        super(name);
        // this, 현재 본인의 인스턴스를 가리킴 : Dog_Ex1
        this.nation = nation;
    }

    // 강아지 정보를 알려주는 기능
    public void showInfo() {
        System.out.println("이름 : " + name);
        System.out.println("나라 : " + nation);
    }
            
}

/*
✅ [1] 초간단 설명
클래스 관계
Animal_Ex1 → 부모 클래스 (동물의 기본 특징)
Dog_Ex1 → 자식 클래스 (강아지의 구체적인 특징)

주요 개념
| 개념        | 설명                                          |
| --------- | ------------------------------------------- |
| **상속**    | 부모 클래스의 코드를 자식 클래스가 그대로 물려받음                |
| **오버라이딩** | 부모의 기능을 자식이 **이름은 똑같이** 유지하면서 **기능만 바꾸는 것** |
| **super** | 부모 클래스의 기능을 부를 때 사용하는 키워드                   |
| **this**  | 현재 자기 자신을 가리키는 키워드 (자식 클래스)                 |

🖼️ [2] 그림으로 이해하기
        Animal_Ex1 (부모 클래스)
        ┌────────────────────┐
        │ protected String name;     │
        │ public void speak() {     │
        │   "동물 소리를 냅니다."   │
        │ }                          │
        └────────────────────┘
                 ▲
                 │ 상속
                 ▼
         Dog_Ex1 (자식 클래스)
        ┌───────────────────────┐
        │ private String nation;      │
        │ public void speak() {       │ ← 오버라이딩된 메서드
        │   "난 멍멍이야, 멍멍할게" │
        │ }                            │
        └───────────────────────┘

🔍 [3] 주요 포인트 정리
| 내용               | 설명                                                  |
| ---------------- | --------------------------------------------------- |
| `extends`        | 부모 클래스를 상속한다는 의미                                    |
| `super(name)`    | 부모 생성자 호출 → `name` 값을 부모 클래스에 전달                    |
| `@Override`      | 부모 메서드의 이름을 **같이 유지**하면서, **기능을 다르게 구현**할 때 사용하는 표시 |
| `protected name` | 부모 클래스의 `name`은 **자식 클래스에서 접근 가능**                  |

✅ [4] 동작 예시
코드 예 :
Dog_Ex1 dog = new Dog_Ex1("초코", "한국");
dog.speak();     // "난 멍멍이야, 그래서 멍멍할게"
dog.showInfo();  // 이름 : 초코 / 나라 : 한국

결과 :
난 멍멍이야, 그래서 멍멍할게
이름 : 초코
나라 : 한국

📘 [5] 오버라이딩 vs 오버로딩 간단 구분
| 구분    | 의미                                            |
| ----- | --------------------------------------------- |
| 오버라이딩 | **상속관계**에서, 부모 메서드를 **같은 이름으로 다시 정의**         |
| 오버로딩  | **같은 클래스 안에서**, **이름 같고 매개변수만 다르게** 여러 메서드 정의 |

✅ 요약
1. Dog_Ex1은 Animal_Ex1의 name을 상속받고 speak() 기능을 오버라이딩해서 "멍멍" 소리를 내요.

2. 생성자에서 super(name)을 호출해 부모의 생성자를 사용했고, this.nation으로 자기만의 새로운 변수(nation)도 설정했어요.

3. showInfo()는 두 값을 출력해주는 강아지 전용 기능입니다.

*/