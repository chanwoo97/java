//  📁 파일명, 클래스명, 패키지명 규칙
// 파일명 = 클래스명 -> 자바는 한 파일에 하나의 public 클래스, 파일명과 클래스명은 완전히 같아야 함 
//                     (Hello.java 안에 public class Hello)

// 클래스명 -> 대문자로 시작, 단어마다 대문자 사용 (ex: StudentInfo, CircleArea)
// 메서드명, 변수명, 패키지명 -> 소문자로 시작, 단어 연결 시 camelCase 사용 (ex: getArea, studentName)
// 특수문자 -> 언더바(_), 달러($) 사용 가능, 나머지는 사용 ❌

// 🧱 클래스 & 메서드 기본 구조
// | 요소               | 설명                                       |
// | ----------------- | ----------------------------               |
// | class           | 변수, 함수, 상수 등을 담는 **설계도**        |
// | static          | 메모리에 **공유됨**, 객체 없이 바로 사용 가능 |
// | int             | 반환 타입 (여기선 정수)                      |
// | sum             | 함수 이름                                   |
// | (int n, int m)  | 함수의 입력값 (매개변수)                     |
// | return          | 결과를 돌려줌                               |

// 🧵 문자열 규칙
// | 표현           | 설명                                    |
// | ------------ | ------------------------------------- |
// | "문자열"      | 큰따옴표 사용 (작은 따옴표 '는 문자 1개)             |
// | "문자열" + 숫자 | 숫자도 문자열처럼 합쳐짐 → "결과: " + 3 = 결과: 3" |

// ➕ 기본 연산 함수
// | 연산 종류 | 함수명 예시 | 기호  |
// | ----- | ------ | --- |
// | 더하기   | `sum`  | `+` |
// | 빼기    | `sub`  | `-` |
// | 곱하기   | `mul`  | `*` |
// | 나누기   | `div`  | `/` |

// 🔢 기본 데이터 타입
// | 타입        | 크기                 | 설명 |
// | --------- | ------------------ | -- |
// | `byte`    | 1바이트 (-128 \~ 127) |    |
// | `short`   | 2바이트               |    |
// | `int`     | 4바이트 (자주 씀)        |    |
// | `long`    | 8바이트 (뒤에 `L` 붙임)   |    |
// | `float`   | 4바이트 (뒤에 `f` 붙임)   |    |
// | `double`  | 8바이트 (소수점 표현에 좋음)  |    |
// | `char`    | 문자 1개 (예: `'a'`)   |    |
// | `boolean` | true/false         |    |

// 📌 final 상수
// 한 번 정하면 절대로 바뀌지 않음, 바꾸려 하면 컴파일 에러

// 📐 String.format() 포맷팅
// | 포맷     | 설명                             |
// | ------ | ------------------------------ |
// | `%.2f` | 소수점 둘째 자리까지 표시 (float, double) |
// | `%d`   | 정수                             |
// | `%s`   | 문자열                            |

// ✅ 증가 연산자 차이
// ------------------------------------------------------------------------------
// | 연산자 |                 설명                  |            예시            |
// | ----- | ------------------------------------- | -------------------------- |
// | `a++` | **후위 연산자**: 먼저 쓰고 나중에 1 증가 |    출력 시 10, 다음 값은 11 |
// | `++a` | **전위 연산자**: 먼저 1 증가시키고 사용  |         출력 시 12         |
// ------------------------------------------------------------------------------

// 📌 자동 형변환 vs 강제 형변환
// ---------------------------------------------------------------------------------------------------
// |    종류    |     예시      |                          설명                                       |
// | ---------- | ------------ | ------------------------------------------------------------------- |
// | 자동 형변환 | `int → long` |           작은 것 → 큰 것으로 갈 때는 자바가 자동 처리                 |
// | 강제 형변환 | `int → byte` | 큰 것 → 작은 것으로 갈 땐 명시적으로 `byte` 붙여야 함 (데이터 손실 위험) |
// ---------------------------------------------------------------------------------------------------
// 예: int num4 = 128;
// byte num5 = (byte) num4;
// → byte의 최대값이 127이라 128을 넘으면 이상한 값이 저장돼요.

// | 요소                                          | 의미                      |
// | ------------------------------------------- | ----------------------- |
// | `public`                                    | 어디서든 접근 가능              |
// | `static`                                    | 객체를 만들지 않아도 사용 가능       |
// | `String`                                    | 문자열을 **반환**             |
// | `introduce_info`                            | 함수 이름                   |
// | `(String name, String phone, String email)` | 3개의 입력값 (이름, 전화번호, 이메일) |

// Scanner scanner = new Scanner(System.in);
// Scanner는 자바에서 입력받을 때 사용하는 클래스입니다.
// System.in은 **콘솔(키보드)**로부터 입력을 받겠다는 의미입니다.

// System.out.println("이름을 입력하세요:");
// String name = scanner.nextLine();
// // System.out.println("입력한 이름:" + name);
// System.out.println("이름을 입력하세요:"): 사용자에게 이름을 입력하라는 메시지를 출력합니다.
// String name = scanner.nextLine();: 사용자가 입력한 값을 문자열로 받습니다.
// nextLine()은 한 줄 전체를 입력받습니다.
// System.out.println("입력한 이름:" + name);: 사용자가 입력한 이름을 출력합니다.

// System.out.println("본인이 좋아하는 숫자를 입력하세요:");
// int number = scanner.nextInt();
// // System.out.println("입력한 본인이 좋아하는 숫자 :" + number);
// System.out.println("본인이 좋아하는 숫자를 입력하세요:"): 사용자가 좋아하는 숫자를 입력하라는 메시지를 출력합니다.
// int number = scanner.nextInt();: 사용자가 입력한 숫자를 정수형으로 받습니다.
// nextInt()는 정수 값을 받을 때 사용합니다.
// System.out.println("입력한 본인이 좋아하는 숫자 :" + number);: 사용자가 입력한 숫자를 출력합니다.

// 🧠 핵심 포인트
// Scanner 사용:
// nextLine(): 문자열 한 줄을 입력받을 때 사용
// nextInt(): 정수값을 입력받을 때 사용

// 개행 문자 처리:
// nextInt() 또는 next()를 사용한 후에는 개행 문자를 처리해야 할 수 있습니다.

// 리소스 닫기:
// scanner.close()를 호출하여 Scanner 객체를 닫는 것을 잊지 않기!

// | 자바 단어    | 쉬운 설명             | 비유                     |
// | ----------- | --------------------- | ----------------------- |
// | 클래스      | 설계도                 | 자동차 설계도            |
// | 객체        | 설계도로 만든 실제 물건 | 실제 자동차              |
// | 상속        | 물려받기               | 아빠가 물려준 자동차 열쇠 |
// | 인터페이스  | 약속                   | 게임에서 점수 매기기 규칙 |
// | 스레드      | 일하는 사람            | 카페 직원 여러 명        |
// ------------------------------------------------------------------------------------------------------


// | 자바 용어               | 쉬운 말 설명            | 비유 예시                       |
// | ------------------- | ------------------ | --------------------------- |
// | 클래스 (Class)         | 설계도, 틀                   | 집 설계도 (집을 짓기 위한 도면)            |
// | 객체 (Object)          | 실제 만든 물건               | 설계도로 만든 실제 집                      |
// | 메서드 (Method)        | 행동, 기능, 일을 시키는 명령어 | 집에서 하는 ‘요리하기’, ‘청소하기’ 같은 행동 |
// | 변수 (Variable)        | 상자, 저장 공간              | 물건을 담는 박스, 데이터를 저장하는 상자     |
// | 상속 (Inheritance)     | 물려받기                     | 아버지 자동차를 자식이 물려받음             |
// | 인터페이스 (Interface)  | 약속, 규칙                   | 친구랑 약속한 게임 규칙                    |
// | 스레드 (Thread)        | 일꾼, 작업자                  | 여러 명의 직원이 각각 일을 하는 모습        |
// | 생성자 (Constructor)   | 처음 만들 때 부르는 도구       | 집 짓기 시작할 때 사용하는 도구            |
// | 패키지 (Package)       | 상자, 파일 폴더               | 책을 담는 책장                            |
// | 예외 (Exception)       | 문제, 사고                   | 자동차가 갑자기 고장나는 상황               |
// | 캡슐화 (Encapsulation) | 숨기기, 감추기                | 물건을 상자 안에 넣고 잠그기               |
// | 다형성 (Polymorphism)  | 여러 모습, 여러 기능을 가진 것 | 변신 로봇 (한 로봇이 여러 모양으로 변함)    |
// | 추상화 (Abstraction)   | 중요한 것만 뽑아내기           | 복잡한 지도에서 길만 쏙 뽑아낸 지도        |
// | this                   | ‘나 자신’                    | 내가 내 행동을 가리킬 때                  |
// | static                 | 공용, 공유                   | 학급 전체가 같이 쓰는 칠판                 |

// | 구성 요소    | 역할           | 비유 설명          |
// | -------- | ------------ | -------------- |
// | 클래스      | 설계도          | 집 설계도          |
// | 메서드      | 작업 명령어 모음    | 집 안에서 하는 각종 일  |
// | main 메서드 | 시작점, 프로그램 입구 | 집 문을 열고 들어가는 곳 |


// | 질문      | 답변                            |
// | ------- | ----------------------------- |
// | 객체가 뭐야? | 현실 세계 물건을 컴퓨터 안에 만든 것         |
// | 왜 필요해?  | 현실을 쉽게 표현하고, 프로그램을 체계적으로 만들려고 |
// | 예시      | 자동차 설계도로 여러 자동차(객체)를 만드는 것    |












// 🧠 왜 ArrayList → HashMap으로 바꿨을까?
// ----------------------------------------------------------------------------------------------
// |         비교 항목      |         ArrayList       |               HashMap                   |
// | --------------------- | ----------------------- | ---------------------------------------- |
// |      데이터 접근 방식  |     순서(index) 기반     |        키(key) 기반 (여기선 번호)         |
// | 삭제/삽입 시 성능 문제 |  중간 삽입/삭제 시 느림   |    키로 접근하므로 빠르게 삽입/삭제 가능    |
// |       중복 키 허용    |     인덱스는 중복 가능    |            키는 고유해야 함               |
// |        사용 예시      | 순차적으로 순회할 때 편함 | 고유 키(예: 회원번호)로 빠르게 찾을 때 유리 |
// ----------------------------------------------------------------------------------------------
