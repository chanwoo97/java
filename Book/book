파일명 = 클래스명과 같아야함 
첫글자는 대문자로 설정
특수문자는 _(언더바), $ 가능
패키지명, 변수명, 함수명(메소드) = 소문자로 시작

public : 접근 지정자, 누구나 다 접근이 된다(모두 볼수 있다.)
class : 변수, 상수, 함수 기능들의 묶음
static : 정적 자원, 공유 자원
int : 기본형 타입, 함수의 반환 타입
sum : 함수의 이름
(int n, int m) : 매개변수, 받는 변수
return : 함수로 실행 후, 반환하는 값
public static int [반환값의 타입] [함수의 이름]([매개변수1], [매개변수2]) {
    return 반환하는 값;
}

void : 반환값이 없다.
main : 함수 이름, 메인 함수에서 실행해서 메인으로 종료함. 정적인 함수(메소드)
String[] args -> String : 문자열 타입, [] : 배열의 의미, args : 배열의 이름(변경 가능)
sum(100, 200) : 함수 이용
사용법 : [받을 변수 타입] [받는 변수명] = 함수이름(인자값1, 인자값2)
함수를 사용하면 함수가 정의가 된곳으로 이동함.
자바에서 문자열은 무조건 ("") 큰 따옴표 사이에 작성
문자열 + 숫자 = 문자열

sum : 더하기 / [+]
mul(multiple) : 곱하기 / [*]
sub(subtract) : 빼기 / [-]
div(divide) : 나누기 / [/]

데이터 타입에 대해서 
기본형
byte, intm short, float, long, double, char, boolean
참조형 : 기본형을 제외한 나머지 모두를 가리킨다.
객체(object), 배열(Array), 문자열(String) 등

int s; -> 변수를 정의만 했고, 실제 할당은 안한 상태
char a; -> 데이터 타입 char, 한 문자만을 의미함
s = 100;
a = 'd';
system.out.println("정수 표현 : " + s);
system.out.println("문자 표현 : " + a);



final : 바꿀 수 없는 값(상수) / 이 값은 절대 바뀌지 않는 상수다. / 한번 정하면 끝.(중간에 바꾸면 에러발생)

%.2f → 소수점 둘째 자리까지 보여줘요.

int는 4바이트, long은 8바이트
→ 작은 자료형에서 큰 자료형으로 바뀌는 건 자바가 자동으로 해줘요.

byte는 -128 ~ 127까지만 표현할 수 있어요.
int num4 = 128; 이걸 byte로 강제로 바꾸면…
숫자가 잘리거나 이상한 값이 나옵니다!




✅ 증가 연산자 차이
------------------------------------------------------------------------------
| 연산자 |                 설명                  |            예시            |
| ----- | ------------------------------------- | -------------------------- |
| `a++` | **후위 연산자**: 먼저 쓰고 나중에 1 증가 |    출력 시 10, 다음 값은 11 |
| `++a` | **전위 연산자**: 먼저 1 증가시키고 사용  |         출력 시 12         |
------------------------------------------------------------------------------


📌 자동 형변환 vs 강제 형변환
---------------------------------------------------------------------------------------------------
|    종류    |     예시      |                          설명                                       |
| ---------- | ------------ | ------------------------------------------------------------------- |
| 자동 형변환 | `int → long` |           작은 것 → 큰 것으로 갈 때는 자바가 자동 처리                 |
| 강제 형변환 | `int → byte` | 큰 것 → 작은 것으로 갈 땐 명시적으로 `byte` 붙여야 함 (데이터 손실 위험) |
---------------------------------------------------------------------------------------------------
예: int num4 = 128;
byte num5 = (byte) num4;
→ byte의 최대값이 127이라 128을 넘으면 이상한 값이 저장돼요.


















🧠 왜 ArrayList → HashMap으로 바꿨을까?
----------------------------------------------------------------------------------------------
|         비교 항목      |         ArrayList       |               HashMap                   |
| --------------------- | ----------------------- | ---------------------------------------- |
|      데이터 접근 방식  |     순서(index) 기반     |        키(key) 기반 (여기선 번호)         |
| 삭제/삽입 시 성능 문제 |  중간 삽입/삭제 시 느림   |    키로 접근하므로 빠르게 삽입/삭제 가능    |
|       중복 키 허용    |     인덱스는 중복 가능    |            키는 고유해야 함               |
|        사용 예시      | 순차적으로 순회할 때 편함 | 고유 키(예: 회원번호)로 빠르게 찾을 때 유리 |
----------------------------------------------------------------------------------------------
